클래스 (class)
	1. 객체지향언어에서 "객체(object)"를 만드는 도구이다.
	2. 클래스는 "객체(object)"를 만드는 설계도이다.
	3. "객체(object)"나 "인스턴스(instance)"를 만드는 설계도이다.
	4. 개념 비교 예시
		① 클래스			   ② 객체(인스턴스)
		   사람				      철수, 영희, 미희 실제 사람
		   붕어빵 만드는 기계     만든 붕어빵
	5. 구성
		변수 => 필드(Field)
		함수 => 메소드(Method)


객체 생성(인스턴스 생성)
	1. 정의된 클래스를 이용하여 "객체"를 생성한다.
	2. 생성 방법
		클래스명 객체명 = new 클래스명();
		클래스명 인스턴스명 = new 클래스명();
	3. 객체(인스턴스) 사용 방법
		객체명.필드명
		객체명.메소드명()


메인 클래스
	1. main 메소드를 가지고 있는 클래스이다.
	2. 프로그램이 시작되는 클래스이다.
	3. 프로그램의 이름이 되는 클래스이다.


하나의 자바파일에 클래스가 2개 이상인 경우
	1. public 키워드는 파일명과 일치하는 클래스에만 명시한다.
	2. 하나의 클래스만 public 키워드를 명시해야 한다.


클래스의 기본 구성
	1. 변수와 함수로 구성된다.
	2. 변수는 "필드", 함수는 "메소드"라고 한다.
	3. 클래스 = 필드(Field) + 메소드(Method)
	4. 예시
		Person 클래스
		1) 필드
			이름, 나이, 성별, 주소, 키, 몸무게 ...
		2) 메소드
			이름을 바꾼다, 키가 큰다, 나이를 먹는다 ...


메소드 작성 규칙
	1. 메소드 정의 (메소드 만들기)
	2. 메소드 호출 (메소드 사용하기)
	3. "메소드 정의" 방법
		형식
		①리턴타입 ②메소드이름 (③매개변수선언, ...) {
			메소드본문;
			④return 리턴값;
		}
		① 리턴타입
			- 메소드의 결과가 가지는 자료형
			- 메소드의 결과가 없다면 void 를 명시함(④이 없어야 함)
		② 메소드이름
			- 변수이름처럼 개발자가 직접 생성
			- camel case 를 따름(첫 글자는 소문자로 한다. 이후에 나타나는 새 단어는 첫 글자를 대문자로 한다.)
		③ 매개변수선언
			- 메소드 호출 시 전달되는 값(인수)을 저장하는 변수
			- 인수가 여러 개면 매개변수선언도 여러 번 해야함
			- 인수가 없으면 ()안을 비워 두면 됨
		④ return 리턴값
			- 메소드의 결과 값을 메소드 호출부로 반환
			- 특정 값 1개만 return 가능  (return a, b; 와 같이 a와 b를 동시에 리턴하는 것은 불가능)
	4. "메소드 호출" 방법
		1) 인스턴스가 있는 경우
			인스턴스이름.메소드이름(인수)
			Scanner scanner = new Scanner(System.in);		// scanner 인스턴스
			scanner.next();									// 인스턴스를 통한 호출
		2) 인스턴스가 없는 경우 (나중에 배울텐데... 인스턴스가 필요 없는 경우)
			클래스이름.메소드이름(인수)
			Integer.parseInt("변환할문자열");


메소드 오버로딩(method overloading)
	1. 한 클래스내에 같은 이름의 메소드가 여러 개 있는 경우이다.
	2. 메소드 이름은 같지만, 매개변수는 다르다.
	3. 리턴 타입은 메소드 오버로딩과 전혀 상관이 없다. 

	메소드 오버로딩의 대표적인 예
	: 메소드 이름은 println 으로 같지만, 괄호 안에서 처리하는 매개변수의 타입이 다르다!
	- System.out.println(정수)	: System.out.println(int)
	- System.out.println(실수)	: System.out.println(double)
	- System.out.println(문자)	: System.out.println(char)
	- System.out.println(문자열): System.out.println(String)
	
	
재귀 호출 (Recursive call)
	1. 메소드를 정의할 때 자신을 자신이 호출하는 방식
	2. 반복문의 처리, 복잡한 알고리즘 처리
	3. 재귀 호출을 잘못 구현하면 무한 루프에 빠질 수 있음
		- StackOverflowError 예외 발생
	4. 반드시 언제 호출이 끝날 것인지 명시해 줘야 함
